import os

print os.getcwd()
# source_list = map(lambda x:'src/'+x,os.listdir('src'))
source_list = os.listdir('.')
source_list = filter(lambda x:(x[len(x)-4:]=='.cpp'), source_list)
# header_list = os.listdir('include')
header_list = os.listdir('../include')
header_list = filter(lambda x:(x[len(x)-2:]=='.h' or
                               x[len(x)-4:]=='.hpp'), header_list)
header_list.append(filter(lambda x:(x[len(x)-2:]=='.h'), os.listdir('.')))

# Import(['env','debug','win32'])
env = Environment()

env.Append(CPPPATH = ['.','/usr/include','../include',
                      '../../cxcore/include'])
debug = ARGUMENTS.get('debug', 1)
win32 = ARGUMENTS.get('win32', 0)
if not int(win32):
    if int(debug):
        env.Append(CPPFLAGS = ['-g','-Werror'])
        env.Append(OBJPREFIX = '.obj_debug/')
    else:
        env.Append(CPPFLAGS = ['-O2','-Werror'])
        env.Append(OBJPREFIX = '.obj_release/')
else:
    env.Append(CPPFLAGS = ['-O2','-Werror'])
    env.Append(OBJPREFIX = '.win32obj/')
    
if not int(win32):
    env.Append(LIBPATH = ['/usr/lib','lib/cxcore'])
    env.Append(LIBS = ['cxcore'])
    env.Append(RPATH = ['/usr/lib','.'])

if int(debug):
    env.SharedLibrary(target='cv_d', 
                      source=source_list, header=header_list)
else:
    env.SharedLibrary(target='cv', 
                      source=source_list, header=header_list)


