





#include <stdio.h>
#include <stdlib.h>
#include "cv.h"
#include "cxcore.h"
#include "highgui.h"
#include "cvext.h"

static float orig_data[]={1.522867,-0.761638,-0.072348,-0.156351,-0.024647,-0.079789,0.033160,
-0.258951,-0.371166,-0.167603,-0.332980,-1.540535,-0.437703,-1.939356,1.589188,0.300297,
-1.684258,1.673059,0.489114,0.034247,0.236398,0.367206,0.417382,-0.965093,-0.598113,-1.354772,
0.083914,-0.530534,1.058217,-0.464461,0.019114,-1.597956,-0.899046,-1.007953,-2.197601,
0.258086,0.498614,-0.533787,1.323946,-0.685033,0.053667,0.423394,-0.205552,-0.305237,
0.815282,-0.023239,1.573072,-0.918802,0.249881,-2.452792,-2.173484,-1.882602,0.786417,
0.646871,0.424076,0.888631,-0.061502,0.633072,-0.569021,-1.690258,-0.054460,-2.089780,
0.828201,2.254057,-0.518742,-0.524705,1.255153,3.178383,1.122009,0.514313,0.028744,
2.063490,0.339133,-0.268829,0.229541,0.201295,0.535324,0.032065,-1.295148,-0.269227,
-0.397485,1.154982,0.779247,-0.233998,-1.440231,-0.318723,-0.385090,0.741732,1.033274,
-0.270023,0.127180,-2.123160,-0.115391,-1.076902,1.134645,0.127094,-1.843995,-1.183590,
1.081941,0.462126,-0.970802,-1.464920,0.966297,1.184888,-0.191288,0.387860,0.655443,0.806205,
-0.233226,-0.946895,1.360086,-0.354853,-0.471521,0.719758,-1.081359,0.305049,0.236633,-0.486871,
-0.453125,0.844996,-1.206153,0.544123,-1.031215,0.276981,-0.704999,-1.510956,-0.385242,0.294329,
0.236860,1.090207,0.204423,0.760893,-0.072330,-0.703696,-2.002227,0.588334,0.722115,1.697229,
-0.536320,-0.650456,-0.267051,-1.100382,-1.443336,-0.189293,0.963877,-0.459008,0.121312,
-0.734598,0.651207,-0.442919,-0.914894,0.164178,-0.694498,-0.192443,0.018921,0.575818,
-0.257846,-0.208938,-1.815507,2.405187,-0.862725,-0.055825,-0.967400,0.843917,2.418480,
-1.219982,-0.360170,-0.811258,-1.158441,0.716283,-0.281212,0.725176,1.047221,0.199346,
-0.882169,1.480091,-1.107176,0.231591,0.515250,-0.271136,-0.991859,0.547559,0.087069,
-0.526682,1.095281,-0.868154,-0.418856,0.383349,1.215123,0.514734,-0.409467,-0.621042,
-1.505276,-0.289579,-0.439905,0.163943,0.508756,1.717093,-1.865381,1.381830,5.242312,
0.334930,3.813054,2.957294,5.126695,2.235249,4.439981,1.078507,5.302728,1.806905,5.862440,
-0.091752,5.023118,0.439582,4.917533,-0.250443,3.904874,1.650416,5.814716,1.552788,5.625910,
0.460174,4.714855,0.624757,3.701386,1.561217,5.922664,-0.053644,4.101310,0.745473,3.979263,
0.376379,5.825112,0.776282,5.595552,0.849987,4.965215,0.228035,4.485918,0.446473,4.944595,
0.406947,5.617872,0.684701,4.982143,0.633971,6.010655,0.623863,4.560619,0.288024,4.465717,
-0.666420,1.966864,1.052780,5.700758,1.786386,6.657411,-0.227904,4.205890,1.269696,5.758051,
1.101730,5.778884,0.405843,5.261427,-0.697631,3.207578,1.759630,5.928318,0.109231,6.423810,
-0.184518,4.702804,1.444095,3.846144,0.936008,6.582086,-0.090235,6.227264,1.245968,5.445358,
-0.904544,4.287304,1.742755,5.302731,1.257214,5.191816,0.850265,3.669692,0.186285,3.957436,
1.189545,1.630551,1.817800,4.835161,0.049272,5.787376,1.970704,5.301061,0.312445,4.068759,
1.430081,4.165922,1.740843,6.309708,0.232033,6.033628,1.026958,6.348266,0.937351,4.287176,
1.172440,5.345767,0.205150,5.855414,2.183648,5.534980,0.091281,3.616652,0.653653,4.862875,
1.262645,8.389649,0.323161,5.365279,1.827992,4.723771,2.443593,7.329146,1.683880,4.221030,
1.082430,4.152759,2.064495,4.843300,1.872147,5.598386,0.969846,3.485746,1.149023,3.787568,
2.737162,5.052030,-0.915379,5.581073,-0.404792,3.580297,0.517348,5.853210,0.911980,5.768640,
1.700786,3.165946,2.150577,4.355336,1.370203,3.340534,-0.103767,5.198858,0.424064,4.946464,
2.080033,5.501252,0.083446,5.029936,1.783264,4.766018,2.268647,5.687956,0.148075,5.288768,
2.393314,5.555741,1.496289,5.192198,0.851910,6.259113,2.447468,4.451358,0.676470,5.892371,
-0.094893,5.680604,0.504754,3.892669,1.339740,4.533434,1.430041,5.591962,-0.071489,5.663234,
-0.004444,4.876988,1.570143,5.392095,1.200864,4.365191,-1.015851,6.695286,1.732953,1.509802,
6.125054,-0.796021,4.840051,2.092367,2.771819,1.870828,4.792949,0.322272,4.409598,1.017796,
6.051966,2.299627,5.290846,1.944200,4.176461,2.112478,5.407940,0.444603,4.167842,1.025193,
6.315132,1.081372,5.965574,2.088265,5.517821,2.236052,5.180629,2.048038,5.183992,0.700863,
2.966647,0.874311,4.533249,-0.503645,5.693864,0.758514,4.298954,0.104161,3.462406,1.694412,
5.463959,0.193117,5.120868,0.846570,3.504331,-0.212836,5.736400,-0.580900,4.275009,1.415698,
6.179132,0.080996,5.398700,1.555959,5.175746,-0.203105,4.803847,0.355552,5.571968,1.031147,
4.571634,1.348870,5.663325,1.124074,4.014631,-0.853786,3.695153,-1.439735,4.539003,2.151192,
4.763861,-0.159405,5.910060,-0.123154,5.825719,-0.142642,5.030852,0.512264,3.269140,1.485300,
5.361703,1.086317,5.170270,1.817813,3.915364,0.896939,5.052094,2.396580,4.627751,2.223688,
4.825335,0.936705,4.031940,0.319254,5.227297,0.651128,5.587105,0.500582,4.448178,1.290818,
5.535634,1.496140,4.319155,1.638617,4.722753,1.278625,9.289118,2.910926,7.224680,1.177041,
4.594061,1.586444,5.748885,0.087308,5.451959,3.002075,4.009474,1.453409,5.312634,0.997622,
5.270883,0.786638,4.311912,0.571730,5.360092,2.352344,4.198548,-0.014091,7.953073,1.819444,
5.922080,-0.063405,4.961173,-0.728863,4.620709,-0.907426,6.477599,2.005224,4.141022,1.629763,
6.635372,1.040874,4.992379,1.447338,5.741563,1.112675,4.499790,2.751225,4.438398,1.300635,
5.033470,1.607367,4.116204,-0.146329,5.029080,1.614466,4.749813,-0.820710,5.566193,1.975558,
6.606346,1.626678,4.822917,0.327377,5.879124,1.480845,5.000661,-0.536379,3.851862,2.538795,
5.038620,-0.652759,3.636276,1.320945,6.112223,-0.588782,3.394164,1.761690,5.265814,0.424106,
4.811188,1.326482,4.759930,2.861280,6.102014,1.298374,5.438506,-1.122070,6.191873,-0.045269,
5.103867,-0.030809,4.385637,0.010419,3.719855,1.075533,5.002723,2.354894,3.891103};

// cvMeanShiftEx
// 
// for both source array and output array, NxD matrix is assumed
// N points as input with D dimensional data
// 
// 
//void cvMeanShiftEx(const CvArr * _src, CvArr * _dst, 
//				   const float ksize=2.0f,
//				   CvTermCriteria criteria=cvTermCriteria(3,10,0.1));


int main(int argc, char * argv[])
{
	const int npoints = 300;
	const int ndims=2;
	CvMat orig=cvMat(npoints,ndims,CV_32F, orig_data);
	CvMat * data = cvCreateMat(orig.rows, orig.cols, CV_32F);
	cvAddS(&orig, cvScalar(5),&orig);
	cvScale(&orig,&orig,18);
CV_TIMER_START();
	cvMeanShiftEx(&orig, data, 60, cvTermCriteria(3,2,0.1));
CV_TIMER_SHOW();
	cvNamedWindow("Test");
	IplImage * dispImage = cvCreateImage(cvSize(320,240),IPL_DEPTH_8U,3);cvZero(dispImage);
	for (int i = 0; i < npoints; i++)
		cvCircle(dispImage, cvPoint(CV_MAT_ELEM(orig,float,i,0),CV_MAT_ELEM(orig,float,i,1)),1,cvScalar(255),-1);
	for (int i = 0; i < npoints; i++)
		cvCircle(dispImage, cvPoint(CV_MAT_ELEM(*data,float,i,0),CV_MAT_ELEM(*data,float,i,1)),1,cvScalar(0,255),-1);
	cvShowImage("Test", dispImage); cvWaitKey();
	cvReleaseMat(&data);
	cvReleaseImage(&dispImage);
	cvDestroyWindow("Test");
	return 0;
}
